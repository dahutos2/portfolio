[{"full_name": "dahutos2/meal_health_verification", "description": "Flutterで作成した 健康度ベースの料理推薦アプリ", "stars": 3, "lang": "Dart", "html": "<h1>Flutter プロジェクト: 健康度ベースの料理推薦アプリ</h1>\n<h2>画像イメージ</h2>\n<table>\n<thead>\n<tr>\n<th>ホーム</th>\n<th>カメラ</th>\n<th>グラフ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img alt=\"home\" src=\"docs/home.png\" /></td>\n<td><img alt=\"camera\" src=\"docs/camera.png\" /></td>\n<td><img alt=\"graph\" src=\"docs/graph.png\" /></td>\n</tr>\n</tbody>\n</table>\n<h2>機能概要</h2>\n<h3>おすすめ料理機能</h3>\n<ul>\n<li>ユーザーの健康状態を考慮して、3つのおすすめ料理を表示。</li>\n<li>適切な時間に注意表示と、撮影ページへの遷移オプション。</li>\n</ul>\n<h3>料理撮影と健康度算出</h3>\n<ul>\n<li>料理の撮影と、画像認識技術を利用した健康度算出。</li>\n<li>非同期処理を使用してユーザーエクスペリエンスを向上。</li>\n</ul>\n<h4>健康度算出ロジック</h4>\n<p>画像認識のモデルを用いて料理の画像を特定のラベルに分類します。<br>\nこの分類に関する詳細や計算方法は以下のとおりです：</p>\n<details>\n  <summary>詳細を見る</summary>\n\n  1. **度数の算出**: <br>\n  画像認識モデルが料理の画像を特定のラベルに分類し、それに基づいて度数を算出します。<br>\n  数式として表すと以下のようになります。\n\n     $$D = \\frac{\\text{分類のindex番号}}{\\text{分類数} - 1}\n     $$\n\n     $\\text {ここで}、D\\text{は料理の度数を表します。}\n     $\n\n  2. **栄養価の配置**: <br>\n  $\\text{栄養価が近い料理は、index番号が近くなるように配置されています。}\n  $\n\n  3. **健康度の算出**: <br>\n  $\\text{一週間の度数の記録のばらつきが大きいほど、健康度は高くなります。}\n  $\n  $\\text{健康度} H \\text{は度数の標準偏差} \\sigma(D) \\text{を使用して以下のように計算されます。}\n  $\n     $$H = CDF(\\sigma(D))\n     $$\n\n     $\\text{ここで、}CDF \\text{は累積分布関数を表し、結果は} 0 < H < 1 \\text{の範囲でスケールされます。}\n     $\n\n</details>\n\n<h3>健康度グラフ表示</h3>\n<ul>\n<li>過去一週間の健康度をグラフ形式で表示。</li>\n<li>過去のデータとの比較が可能。</li>\n<li>各日の食事内容と時刻も併記。</li>\n</ul>\n<h2>開発ルール</h2>\n<ul>\n<li><code>main</code> ブランチへの直接のプッシュやマージは禁止。</li>\n<li>マージはプルリクエストを通じてのみ許可。</li>\n<li>プルリクエスト作成時には自動テストと静的解析が行われる。</li>\n</ul>\n<h2>アーキテクチャ概要</h2>\n<p>DDD ✖️ オニオンアーキテクチャ\n<img alt=\"image\" src=\"./source/images/onion_architecture.avif\" /></p>\n<h3>DI (Dependency Injection)</h3>\n<ul>\n<li><strong>di_container.dart</strong>: DIコンテナの定義</li>\n</ul>\n<h3>Domain Layer</h3>\n<ul>\n<li><strong>exception</strong>: カスタム例外やリソースに関する定義</li>\n<li><strong>extensions</strong>: カスタム拡張メソッドの集まり</li>\n<li><strong>model</strong>: ドメインオブジェクトの定義</li>\n<li><strong>repository</strong>: リポジトリインターフェイスの定義</li>\n<li><strong>service</strong>: ドメインサービスの定義</li>\n</ul>\n<h3>Infrastructure Layer</h3>\n<ul>\n<li><strong>api</strong>: 外部サービスやデータアクセスのヘルパー</li>\n<li><strong>repository_sql</strong>: SQLベースのリポジトリの実装</li>\n</ul>\n<h3>L10n (Localization)</h3>\n<ul>\n<li><strong>arb files</strong>: 多言語対応のためのARBファイル</li>\n</ul>\n<h3>Presentation Layer</h3>\n<ul>\n<li><strong>view</strong>: UIの実装</li>\n<li><strong>extensions</strong>: UIの拡張メソッド</li>\n<li><strong>page</strong>: 画面のコンポーネント</li>\n<li><strong>share</strong>: 共有されるUIリソース</li>\n<li><strong>widget</strong>: 再利用可能なUIコンポーネント</li>\n<li><strong>view_model</strong>: UIのロジックや状態を管理する層</li>\n<li><strong>data</strong>: 画面に表示するデータクラスの定義</li>\n<li><strong>notifier</strong>: 状態管理のためのNotifierの定義</li>\n</ul>\n<h3>Use Case Layer</h3>\n<ul>\n<li><strong>dto</strong>: Data Transfer Objectsの定義。</li>\n<li><strong>use_cases</strong>: ビジネスロジックの定義。</li>\n</ul>\n<h3>補足</h3>\n<p><code>index.dart</code>ファイルは各ディレクトリの内容を統合的にインポートするためのファイルです。</p>\n<h2>技術領域</h2>\n<ul>\n<li><strong><code>camera</code></strong>: アプリ内でのカメラ操作をサポート。</li>\n<li><strong><code>google_mlkit_object_detection</code></strong>: 料理の画像認識技術の実装に使用。</li>\n<li><strong><code>fl_chart</code></strong>: 健康度のグラフ表示に利用。</li>\n<li><strong><code>tflite_flutter</code></strong>: TensorFlow LiteをFlutterで利用するためのサポート。</li>\n</ul>\n<h2>追加情報</h2>\n<ul>\n<li>10カ国語に対応</li>\n<li>多言語対応ツールとしてPythonを利用。</li>\n</ul>\n<h2>開発用コマンド（Makefile）</h2>\n<p>開発やビルド、L10n対応、Assets対応などは、すべて Makefile によって一元化されています。</p>\n<pre><code class=\"language-bash\"># アプリを実行\nmake run\n\n# arbファイルからローカライズコードを生成\nmake l10n\n\n# assets定義コードを生成（build_runner）\nmake assets\n\n# arbファイル生成\nmake localize\n\n# ML ラベル生成\nmake ml\n</code></pre>\n<h2>バージョン管理</h2>\n<h3>バージョン</h3>\n<ul>\n<li>flutter 3.29.3-stable</li>\n</ul>\n<h3>管理方法</h3>\n<p><strong><a href=\"https://asdf-vm.com/\"><code>asdf</code></a>を使用する</strong></p>\n<p><code>asdf</code>はプログラミング言語やツールのバージョン管理を行うためのツールであり、<br>\n複数の言語やツールのバージョンを1つのフレームワークで管理することができます。<code>asdf</code>を使用すると、<br>\nプロジェクトごとに異なるバージョンの言語やツールを使うことが容易になります。</p>\n<p>Flutterのバージョン管理に<code>asdf</code>を使用する場合、以下の手順でセットアップすることができます。</p>\n<h4>1. <code>asdf</code>のインストール</h4>\n<p>まず、<code>asdf</code>自体をインストールします。多くの場合、Homebrewを使用してMacにインストールします。</p>\n<pre><code class=\"language-bash\">brew install asdf\n</code></pre>\n<h4>2. シェルの設定</h4>\n<p>使用しているシェル（bash, zshなど）の設定ファイル（<code>.bashrc</code>, <code>.zshrc</code>など）に以下を追加します。</p>\n<pre><code class=\"language-bash\">. $(brew --prefix asdf)/libexec/asdf.sh\n</code></pre>\n<h4>3. Flutter/Dartプラグインの追加</h4>\n<p><code>asdf</code>でFlutterのバージョン管理を行うために、Flutterプラグインを追加します。</p>\n<pre><code class=\"language-bash\">asdf plugin-add flutter\nasdf plugin-add dart\n</code></pre>\n<h4>4. jqコマンドの追加</h4>\n<p>jqコマンドは、JSONデータから目的の情報を抽出するのに便利な機能を提供しています。なのでjqを追加します。</p>\n<pre><code class=\"language-bash\">brew install jq\n</code></pre>\n<h4>5. Flutter/Dartのバージョンのインストール</h4>\n<p>必要なバージョンのFlutterとDartをインストールします。</p>\n<pre><code class=\"language-bash\">asdf install flutter 3.13.4\nasdf install dart 3.1.2\n</code></pre>\n<h4>6. グローバルまたはローカルでのバージョンの設定</h4>\n<p>インストールしたFlutterとDartのバージョンを、グローバルまたはプロジェクトごとにローカルで設定します。\n- グローバルでの設定：</p>\n<pre><code class=\"language-bash\">asdf global flutter 3.13.4\nasdf global dart 3.1.2\n</code></pre>\n<ul>\n<li>ローカル（プロジェクトごと）での設定：</li>\n</ul>\n<pre><code class=\"language-bash\">asdf local flutter 3.13.4\nasdf local dart 3.1.2\n</code></pre>\n<p>ローカルでの設定を行うと、そのディレクトリに<code>.tool-versions</code>というファイルが作成され、</br>\nそのプロジェクトで使用するFlutterのバージョンが指定されます。</p>\n<h4>7. 他のバージョンのインストールと切り替え</h4>\n<p>必要に応じて他のバージョンのFlutterをインストールし、</br>\n<code>asdf global</code>や<code>asdf local</code>コマンドを使用してバージョンを切り替えることができます。</p>\n<h4>8. IDEの設定</h4>\n<h5>VS Code</h5>\n<p>Code -&gt; Preferences -&gt; Settingsに移動する</br>\nDart: Flutter Sdk Pathsの箇所で「Add Item」ボタンをクリックして、以下を追加する</br>\n<code>/Users/{ユーザー名}/.asdf/installs/flutter/{flutterバージョン}</code></p>\n<h5>Android Studio</h5>\n<p>Settings &gt; Languages &amp; Frameworks &gt; Flutter &gt; Flutter SDK Pathに以下を設定する\nSettings &gt; Languages &amp; Frameworks &gt; Dart &gt; Dart SDK Pathに以下を設定する</br></p>\n<pre><code>/Users/{ユーザー名}/.asdf/installs/flutter/{flutterバージョン}\n/Users/{ユーザー名}/.asdf/installs/dart/{dartバージョン}\n</code></pre>"}, {"full_name": "dahutos2/local-competitive-app", "description": "C#とTypescirptでコーディングテストをローカルで行うアプリ", "stars": 1, "lang": "TypeScript", "html": "<h1>競技プログラミング勉強アプリ</h1>\n<p>ローカル環境で <strong>C# / TypeScript</strong> のコードを書き、テストケースで即時採点できる学習用アプリです。<br />\nフロントエンド（React + Monaco Editor）、バックエンド（Node.js/Express）、静的解析 &amp; 補完 API（ASP.NET Core + Roslyn）の三層構成で動作します。<br />\n競技プログラミングの本番さながらの <strong>失格判定・制限時間管理・コピー／ペースト監視</strong> も備えています。</p>\n<h2>スクリーンショット</h2>\n<table>\n<thead>\n<tr>\n<th>ログイン</th>\n<th>問題</th>\n<th>エディタ + 補完例</th>\n<th>採点結果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img alt=\"ログイン\" src=\"docs/login.png\" /></td>\n<td><img alt=\"問題\" src=\"docs/quiz.png\" /></td>\n<td><img alt=\"エディタ\" src=\"docs/editor.png\" /></td>\n<td><img alt=\"採点結果\" src=\"docs/result.png\" /></td>\n</tr>\n</tbody>\n</table>\n<h2>フォルダ構成</h2>\n<pre><code class=\"language-text\">local-competitive-app/\n├─ package.json           # ルート：API/Build スクリプト集約\n├─ tsconfig.json\n├─ server/                # Node.js + Express (コード実行・判定)\n│   ├─ server.ts\n│   ├─ runCode.ts\n│   └─ types.ts\n├─ code-analysis-server/  # ASP.NET Core + Roslyn (補完・診断 API)\n│   └─ CodeAnalysisServer/\n│       ├─ Controllers/\n│       ├─ Services/\n│       └─ ...\n├─ client/                # Vite + React + TypeScript (UI)\n│   ├─ src/\n│   │   ├─ components/\n│   │   └─ data/\n│   |   └─ ...\n│   └─ public/\n├─ temp/                  # 一時ビルド/実行ファイル\n└─ results/               # 提出結果ログ\n</code></pre>\n<h2>主な機能</h2>\n<table>\n<thead>\n<tr>\n<th>機能</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Monaco Editor 統合</td>\n<td>C#/TS シンタックスハイライト・補完・コードアクション</td>\n</tr>\n<tr>\n<td>Roslyn 解析 API</td>\n<td>エラー/警告診断・Hover 情報・Signature Help・Quick Fix</td>\n</tr>\n<tr>\n<td>テストケース実行</td>\n<td>複数ケース一括採点 / 公開テストの個別実行</td>\n</tr>\n<tr>\n<td>制限時間 &amp; 失格判定</td>\n<td>コピー/ペースト監視・タイムアップ・手動失格</td>\n</tr>\n<tr>\n<td>言語切替</td>\n<td>プルダウンで C# / TypeScript を即時切替</td>\n</tr>\n<tr>\n<td>完了画面</td>\n<td>個々のテスト結果 &amp; 総合判定を表示・JSON 保存</td>\n</tr>\n</tbody>\n</table>\n<h2>クイックスタート</h2>\n<blockquote>\n<p><strong>前提ソフトウェア</strong></p>\n<ul>\n<li><strong>Node.js 18+</strong></li>\n<li><strong>.NET SDK 8.0+</strong></li>\n<li>Git / Bash など</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-bash\"># 1. クローン\ngit clone https://github.com/dahutos2/local-competitive-app.git\ncd local-competitive-app\n\n# 2. 依存関係\nnpm install            # ルート（Express &amp; スクリプト群）\ncd client &amp;&amp; npm install   # フロント\ncd ..\n\n# 3. .NET 依存を復元\ncd code-analysis-server/CodeAnalysisServer\ndotnet restore\ncd ../../\n\n# 4. 開発モード同時起動（React / Express / Roslyn API）\nnpm run dev\n# ├─ http://localhost:3000 : Vite Dev Server\n# ├─ http://localhost:4000 : API サーバ\n# └─ http://localhost:6000 : C# 解析サーバ（Swagger あり）\n</code></pre>\n<h3>本番ビルド</h3>\n<pre><code class=\"language-bash\">\n# バンドル + Release ビルド\nnpm run build\n# ├─ tsc -b &amp;&amp; vite build          : client を client/dist に出力\n# ├─ tsc -p ./server/tsconfig.json : TypeScript → JS 変換\n# └─ dotnet build -c Release       : Roslyn API Release ビルド\n\n# 起動\nnpm run release\n# ├─ http://localhost:3000 : Vite preview\n# ├─ http://localhost:4000 : API サーバ\n# └─ http://localhost:6000 : C# 解析サーバ\n</code></pre>\n<hr />\n<h2>主要スクリプト一覧</h2>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>役割</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>開発</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><code>npm run dev</code></td>\n<td>解析 API + サーバ + Vite を並列起動</td>\n</tr>\n<tr>\n<td><code>npm run server:dev</code></td>\n<td><code>nodemon</code> + <code>ts-node</code> で Express をホットリロード</td>\n</tr>\n<tr>\n<td><code>npm run client:dev</code></td>\n<td><code>cd client &amp;&amp; vite</code></td>\n</tr>\n<tr>\n<td><code>npm run analysis:dev</code></td>\n<td>Roslyn API (<code>dotnet run</code>)</td>\n</tr>\n<tr>\n<td><strong>本番</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><code>npm run build</code></td>\n<td>3 サービスを Release ビルド</td>\n</tr>\n<tr>\n<td><code>npm run release</code></td>\n<td>Release 起動を並列実行</td>\n</tr>\n<tr>\n<td>個別 <code>*:build</code> / <code>*:release</code></td>\n<td>各レイヤーのみビルド or 起動</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2>ポート &amp; プロキシ</h2>\n<table>\n<thead>\n<tr>\n<th>役割</th>\n<th>既定ポート</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vite Dev Server</td>\n<td><strong>3000</strong></td>\n<td><code>vite.config.ts</code> で <code>/api</code> を :4000 にプロキシ</td>\n</tr>\n<tr>\n<td>Express API</td>\n<td><strong>4000</strong></td>\n<td><code>/api/*</code></td>\n</tr>\n<tr>\n<td>C# Roslyn API</td>\n<td><strong>6000</strong></td>\n<td><code>Program.cs</code> で <code>Kestrel</code> 6000</td>\n</tr>\n</tbody>\n</table>\n<p>変更する場合は各ソースのポート参照を合わせてください。</p>\n<h2>開発メモ</h2>\n<ul>\n<li>\n<p><strong>便利コマンド</strong></p>\n<p>```bash</p>\n<h1>vite + react + typescript のプロジェクトを作成</h1>\n<p>npm create vite@latest client -- --template react-ts\n```</p>\n</li>\n<li>\n<p><strong>失格判定</strong></p>\n</li>\n<li>\n<p>Monaco 内以外での <kbd>Ctrl/Cmd</kbd>+<kbd>C/V</kbd> → <code>/api/disqualify</code></p>\n</li>\n<li>\n<p>時間超過・ボタン操作でも失格をトリガー</p>\n</li>\n<li>\n<p><strong>問題データ</strong></p>\n</li>\n<li>\n<p><code>client/src/data/tasks.json</code> : 本番問題</p>\n</li>\n<li><code>docs/task.md</code> : 本番問題の解説</li>\n<li><code>client/src/data/practiceTasks.json</code> : 練習用</li>\n</ul>"}]